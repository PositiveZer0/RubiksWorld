@using RubiksWorld.Common
@{
    this.ViewData["Title"] = "Rubik's World";
}

<link href="~/css/stopwatch.css" rel="stylesheet" type="text/css">

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gold Stopwatch</title>
    <link rel="stylesheet" href="style.css" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@200;900&display=swap"
          rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,300;1,300&display=swap"
          rel="stylesheet" />
</head>

<body>
    <div class="stopwatch">
        <h1><span class="gold">CUBE</span> TIMER</h1>
        <div><h4 id="scramble" class="my-2"></h4></div>
        <div>
            <span class="time" id="display">00:00:00</span>
        </div>
        @*<div class="controls">
            <button class="buttonPlay">
                <img id="playButton" src="https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/play-button_opkxmt.svg" />

                <img id="pauseButton" src="https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/pause-button_pinhpy.svg" />
            </button>

            <button class="buttonReset">
                <img id="resetButton" src="https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/reset-button_mdv6wf.svg" />
            </button>
        </div>*@
    </div>
    <div style="height: 135px; overflow: auto; padding: 5px; margin: 10px; border: 1px solid #000000; background: #fff;">
        <table cellpadding="0" cellspacing="0">
            <tbody id="lastTime">
                <tr id="lastEl">
                    <td style="padding: 0 5px; margin: 0px;" >Hello</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div>
        <p>Average: <span id="averageTime"></span></p>
    </div>
    <span id="lastTime" display="block"></span>
    <script src="script.js"></script>
</body>
</html>

<script>
    let allTimes = [];
    var numberOfSolves = 1;

    window.onload = function () {
        this.makeScramble()
    }
    let isStarted = false;
    document.onkeyup = function (evt) {
        evt = evt || window.event;
        if (evt.keyCode == 32 && isStarted == false) {
            isStarted = true;
            reset();
            start();
        }
        else if (evt.keyCode == 32 && isStarted == true) {
            isStarted = false;
            pause();
            makeScramble();
        }
    };

    function timeToString(time) {
        let diffInHrs = time / 3600000;
        let hh = Math.floor(diffInHrs);

        let diffInMin = (diffInHrs - hh) * 60;
        let mm = Math.floor(diffInMin);

        let diffInSec = (diffInMin - mm) * 60;
        let ss = Math.floor(diffInSec);

        let diffInMs = (diffInSec - ss) * 100;
        let ms = Math.floor(diffInMs);

        let formattedMM = mm.toString().padStart(2, "0");
        let formattedSS = ss.toString().padStart(2, "0");
        let formattedMS = ms.toString().padStart(2, "0");

        return `${formattedMM}:${formattedSS}:${formattedMS}`;
    }

    // Declare variables to use in our functions below

    let startTime;
    let elapsedTime = 0;
    let timerInterval;

    // Create function to modify innerHTML

    function print(txt) {
        document.getElementById("display").innerHTML = txt;
    }

    function printScramble(txt) {
        document.getElementById("scramble").innerHTML = txt;
    }

    // Create "start", "pause" and "reset" functions

    function start() {
        startTime = Date.now() - elapsedTime;
        timerInterval = setInterval(function printTime() {
            elapsedTime = Date.now() - startTime;
            print(timeToString(elapsedTime));
        }, 10);
        //showButton("PAUSE");
    }

    function pause() {
        clearInterval(timerInterval);
        displayLastTime();
        //showButton("PLAY");
    }

    function reset() {
        clearInterval(timerInterval);
        print("00:00:00");
        elapsedTime = 0;
       // showButton("PLAY");
    }
    
    // Create function to display buttons

    //function showButton(buttonKey) {
    //    const buttonToShow = buttonKey === "PLAY" ? playButton : pauseButton;
    //    const buttonToHide = buttonKey === "PLAY" ? pauseButton : playButton;
    //    buttonToShow.style.display = "block";
    //    buttonToHide.style.display = "none";
    //}
    // Create event listeners

    //let playButton = document.getElementById("playButton");
    //let pauseButton = document.getElementById("pauseButton");
    //let resetButton = document.getElementById("resetButton");

    //playButton.addEventListener("click", start);
    //pauseButton.addEventListener("click", pause);
    //resetButton.addEventListener("click", reset);


    //Create scramble

    function displayLastTime() {
        let lastTimeElement = document.getElementById("display").innerHTML;
        let displayElement = document.getElementById("lastTime");
        allTimes.push(lastTimeElement);
        allTimes.forEach(element => console.log(element));
        let trElement = document.createElement("tr");
        let tdElement = document.createElement("td");
        tdElement.innerHTML = numberOfSolves + ". " + lastTimeElement;
        console.log(tdElement.innerHTML);
        trElement.appendChild(tdElement);
        displayElement.prepend(trElement);
        //let el = document.getElementById("lastEl");
        //displayElement.insertBefore(trElement, el);
        //displayElement.innerHTML = "<p>" + allTimes.join("</p><p>") + "<p>";
        numberOfSolves++;
    }

    function makeScramble() {
        var options = ["F", "F2", "F'", "R", "R2", "R'", "U", "U2", "U'", "B", "B2", "B'", "L", "L2", "L'", "D", "D2", "D'"]
        var numOptions = [0, 1, 2, 3, 4, 5] // 0 = F, 1 = R, 2 = U, 3 = B, 4 = L, 5 = D
        var scramble = []
        var scrambleMoves = []
        var bad = true

        while (bad) {
            scramble = []
            for (var i = 0; i < 20; i++) {
                scramble.push(numOptions[getRandomInt(6)])
            }
            // check if moves directly next to each other involve the same letter
            for (var i = 0; i < 20 - 1; i++) {
                if (scramble[i] == scramble[i + 1]) {
                    bad = true
                    break
                } else {
                    bad = false
                }
            }
        }
        //console.log(scramble)
        // switch numbers to letters
        var move
        for (var i = 0; i < 20; i++) {
            switch (scramble[i]) {
                case 0:
                    move = options[getRandomInt(3)] // 0,1,2
                    scrambleMoves.push(move)
                    break
                case 1:
                    move = options[getRandomIntBetween(3, 6)] // 3,4,5
                    scrambleMoves.push(move)
                    break
                case 2:
                    move = options[getRandomIntBetween(6, 9)] // 6,7,8
                    scrambleMoves.push(move)
                    break
                case 3:
                    move = options[getRandomIntBetween(9, 12)] // 9,10,11
                    scrambleMoves.push(move)
                    break
                case 4:
                    move = options[getRandomIntBetween(12, 15)] // 12,13,14
                    scrambleMoves.push(move)
                    break
                case 5:
                    move = options[getRandomIntBetween(15, 18)] // 15,16,17
                    scrambleMoves.push(move)
                    break
            }
        }
        printScramble(scrambleMoves.join(' '))
        console.log(scrambleMoves)
    }

    function getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max)) // returns up to max - 1
    }

    function getRandomIntBetween(min, max) { // return a number from min to max - 1. Ex. 3, 9 returns 3 - 8
        return Math.floor(Math.random() * (max - min) + min)
    }
</script>